module Orb::Core::Types {
    type Unit
}

module Orb::Core::Booleans {
    type Bool {
        constructor True
        constructor False
    }
}

module Orb::Core::Numbers {
    type Int
    type Real
}

module Orb::Core::Errors with Orb::Core::* {
    trait Error
}

module M with Orb::Core::* {
    effect Then = () -> Int
    effect Else = () -> Int

    fun (Unit) buildIf (condition Int) (Int with Then) = select condition {
        case 1 = cause .Then()
        case else = cause .Else()
    }

    prefix operator ifOp `if` by ::buildIf

    fun (Unit) main () () {
        x = 1
#        y = .true
#        y = `if` 1 { flow ->
#            case Then = flow.resume(1)
#            case Else = flow.resume(0)
#        }

#        typeOf y
    }
}