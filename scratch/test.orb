module Orb::Core::Numbers {
    type Int
}

module Orb::Core::Booleans {
    type Bool {
        constructor True
        constructor False
    }

    (self Bool) and (other Bool) (Bool) = select self {
        case true = other
        case else = false
    }

    (self Bool) or (other Bool) (Bool) = select self {
        case true = true
        case else = other
    }

    (self Bool) not () (Bool) = select self {
        case true = false
        case else = true
    }

    infix operator boolAnd `&&` by Bool::and
    infix operator boolOr  `||` by Bool::or
    prefix operator boolNot `!` by Bool::not
}

module Orb::Core::Types {
    type Unit
    trait Any
}

module Orb::Core::Errors {
    trait Error
}

module Orb::Core::Collections {
    context CollectionCtx [Element] {
        trait Collection {
            (self Self) size () (Int)
        }
    }
}

module Orb::Core::Collections::Sets {
    context SetCtx [Element] {
        alias Set = [Element]
    }
}

module M with Orb::Core::* {
    (Unit) main () () {
#        bs = [true, false]

        return
    }
}
