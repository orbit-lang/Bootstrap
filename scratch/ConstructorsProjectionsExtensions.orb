module Orb::Types::Intrinsics {
    type Unit
    type Int
    type constructor Any<T>(value T)

    extension Any {
        (self Self) getSelf () (Self) = self
    }
}

module Orb::Core::Main {
    type Main
}

module Single with Orb::* {
    type constructor Box<T>(value T)

    trait A
    type B
    type C

    extension Box where T : A {
        (self Self) getA () (A) = self.value
    }

    projection B : A

    (self Main) main () () {
        aBox = Box(B())

        typeOf aBox.getA()
    }
}