module M {
    context CombinableCtx [T] with trait Combinable {
        (self T) combine (other T) (T)
    }

    context BoxCtx [ValueType]
        with type Box(value ValueType)

    extension BoxCtx within CombinableCtx [Self] & CombinableCtx [Self::ValueType]
        with projection Box : Combinable with combine by ::Box

    projection Int : Combinable within CombinableCtx [Int]
        with combine by Int::plus
#
#    type IntRange(start Int, end Int)
}

#module Options {
#    context OptionCtx [T] with
#        type Option = None | Some(value T)
#
#    extension Bool within OptionCtx [Bool] {
#        (self Bool) optionValue () (Option) = select self {
#            case true = Option::Some(self)
#            case else = Option::None
#        }
#    }
#}