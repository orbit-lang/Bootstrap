module Orb::Core::Types {
    type Unit
}

module Orb::Core::Booleans {
    type Bool {
        constructor True
        constructor False
    }
}

module Orb::Core::Numbers {
    type Int
    type Real
}

module Orb::Core::Errors {
    trait Error
}

module Orb::More::Attributes::Intrinsics {
    attribute KindEquals = (A, B) => A ^ B
    attribute TypeEquals = (A, B) => A = B
    attribute Implements = (A, B) => A : B

    attribute AnyTypeArrow = (F) => .KindEquals(F, (_) => {})
    attribute AnyArrow = (F) => .TypeEquals(F, (Any) -> Any)
}

module Main with Orb::* {
    projection Int : Error

    context OptionCtx [ValueType] {
        type Errors {
            constructor ForceUnwrapNone
        }

        projection Errors : Error

        alias Option = (Some: { value ValueType } | None: {})

        fun (self Option) force () (ValueType) = select self {
            case Some(value) = value
            case None = panic 0
        }
    }

    fun (Any) main () () {

    }
}