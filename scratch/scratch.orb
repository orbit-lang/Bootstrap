module Orb::Core::Types {
    type Unit
}

module Orb::Core::Numbers {
    type Int
}

module Orb::Core::Booleans {
    type Bool {
        constructor True
        constructor False
    }

    (self Bool) not () (Bool) = select self {
        case true = false
        case else = true
    }
}

module M with Orb::* {
    type Days {
        constructor Monday
        constructor Tuesday
        constructor Wednesday
        constructor Thursday
        constructor Friday
        constructor Saturday
        constructor Sunday
    }

    (self Bool) add (other Bool) (Bool) = self

    infix operator boolAdd `+` by Bool::add

    (Bool) main () (Int) {
        x = 1
        id = { x -> x }
        id2 = { x, y, z -> x * y * z }
        id3 = { -> x }
        id4 = { (x, y Int) -> x.not() }

        typeOf id(1)
        typeOf id2(1, 2, 3)
        typeOf id3()
        typeOf id4(true, 2)
    }
}