module Orb::Core::Types {
    type Unit
}

module Orb::Core::Booleans {
    type Bool {
        constructor True
        constructor False
    }
}

module Orb::Core::Numbers {
    type Int
    type Real
}

module Orb::Core::Errors with Orb::Core::* {
    trait Error
}

#@IntrinsicModule
#module Orb::More::Fx {
#    context FlowCtx [ResultType] {
#        type Flow
#
#        fun (self Flow) resume (result ResultType) () {
#
#        }
#    }
#}

module Main with Orb::* {
    effect Throw()
    effect DivideByZero()

    alias ThrowingFunction = () -> Unit with Throw

    fun (Unit) main () () {

    }
}