module Orb::Core::Numbers {
    type Int
}

module Orb::Core::Booleans {
    type Bool {
        constructor True
        constructor False
    }

    (self Bool) and (other Bool) (Bool) = select self {
        case true = other
        case else = false
    }

    (self Bool) or (other Bool) (Bool) = select self {
        case true = true
        case else = other
    }

    (self Bool) not () (Bool) = select self {
        case true = false
        case else = true
    }

    infix operator boolAnd `&&` by Bool::and
    infix operator boolOr  `||` by Bool::or
    prefix operator boolNot `!` by Bool::not
}

module Orb::Core::Types {
    type Unit
    trait Any
}

module M with Orb::Core::* {
    alias Point = { x Int, y Int }

    (self Int) pow (exponent Int) (Int) = self
    (self Int) squared () (Int) = self.pow(2)

    infix operator powerOf `power of` by Int::pow
    postfix operator squared `squared` by Int::squared

    (Unit) main () () {
        zero = 0 `power of` 1
        four = 2 `squared`

        typeOf zero
        typeOf four
    }
}
