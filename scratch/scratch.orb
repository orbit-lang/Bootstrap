module Orb::Core::Types {
    type Unit
}

module Orb::Core::Numbers {
    type Int
}

module Orb::Core::Booleans {
    type Bool {
        constructor True
        constructor False
    }

    (self Bool) not () (Bool) = select self {
        case true = false
        case else = true
    }
}

module M with Orb::* {
    (self (Int, Int) -> Int) invoke (x Int, y Int) (Int) = self(x, y)

    (Bool) main () () {
        id = { x -> x }
        typeOf id
        return
    }
}