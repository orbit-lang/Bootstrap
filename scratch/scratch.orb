module Orb::Core::Types {
    type Unit
}

module Orb::Core::Numbers {
    type Int
}

module Orb::Core::Booleans {
    type Bool {
        constructor True
        constructor False
    }
}

module M with Orb::* {
    type Days {
        constructor Monday
        constructor Tuesday
        constructor Wednesday
        constructor Thursday
        constructor Friday
        constructor Saturday
        constructor Sunday
    }

    type Nat {
        constructor Zero
        constructor Next(n Nat)
    }

    (self Days) isWeekend () (Bool) = select self {
        case Saturday = true
        case Sunday = true
        case else = false
    }

    (self Bool) not () (Bool) = select self {
        case true = false
        case false = true
    }

    (self Int) even () (Bool) = select self % 2 {
        case 0 = true
        case else = false
    }

    (Bool) main () () {
        t = true
        f = false
        typeOf t

        check t, f

        return
    }
}