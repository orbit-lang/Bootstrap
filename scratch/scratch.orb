module Orb::Core::Types {
    type Unit
}

module Orb::Core::Numbers {
    type Int
}

module TypeFunctions with Orb::* {
    alias ID = (T) => T
    alias MapEntry = (K, V) => { key K, value V }
    alias Map = (K, V) => [MapEntry(K, V)]
    alias Function = (A, B) => (A) -> B
    alias ValueID = (A, B) => Function(A, B)
    alias List = (Element) => [Element]

    fun (Unit) main () () {
        a = [1, 2, 3]
        b = List(Int)()

        check a, b
    }
}