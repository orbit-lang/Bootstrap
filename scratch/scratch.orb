module Orb::Core::Types {
    type Unit
}

module Orb::Core::Booleans {
    type Bool {
        constructor True
        constructor False
    }
}

module Orb::Core::Numbers {
    type Int
    type Real
}

module Orb::Core::Errors with Orb::Core::* {
    trait Error
}

module Main with Orb::* {
    attribute Eq = (A, B) => A = B
    alias Nat = (Zero: Unit | Next: (N) => (Unit, N))
    alias N1 = .Next(Zero)

    alias LT = (N, M) => Any where .Eq(N, Nat) & .Eq(M, Nat)
    alias LTTest = .LT(Zero, .Next(.Next(Zero)))

    fun (Unit) main () () {

    }
}