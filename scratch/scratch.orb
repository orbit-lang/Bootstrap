module Orb::Core::Types {
    type Unit
}

module TypeFunctions with Orb::* {
    alias ID = (T) => T
    alias Function = (A) => A
    alias MapEntry = (K, V) => { key K, value V }
    alias Map = (K, V) => [MapEntry(K, V)]
    alias Function = (A, B) => (A) -> B

    fun (Unit) main () () {
        m = Map(Unit, Unit)()
        typeOf Map(Map(Unit, Unit), Unit)()
    }
}