module Orb::Core::Types {
    type Unit
}

module Orb::Core::Booleans {
    type Bool {
        constructor True
        constructor False
    }
}

module Orb::Core::Numbers {
    type Int
    type Real
}

module Orb::Core::Errors with Orb::Core::* {
    trait Error
}

#module Orb::More::Fx {
#    context FlowCtx [ResultType] {
#        type Flow
#
#        fun (self Flow) resume (result ResultType) () {
#
#        }
#    }
#}

module Main with Orb::* {
    effect Throw()
    effect DivideByZero()

    projection Int : Error

    fun (self Int) throwIfZero () (Int with Throw) = select self {
        case 0 = 0 # cause Throw()
        case else = 1
    }

    fun (Unit) main () () {
        i = 2.throwIfZero() by { flow ->
            case Throw = flow.resume(0)
            case DivideByZero = flow.resume(1)
        }
    }
}