module Orb::Core::Types {
    type Unit
}

module Orb::Core::Booleans {
    type Bool {
        constructor True
        constructor False
    }
}

module Orb::Core::Numbers {
    type Int
    type Real
}

module Orb::Core::Errors {
    trait Error
}

module Foos {
    trait Tr

    type Foo : Tr

    projection Foo : Tr
}

module Main with Orb::* with Foos {
#    effect Cast = (A, B) => true
#        when check A, B
#
    attribute Check = (A, B) => A = B
#        with .Cast(A, B)

    attribute CheckTrait = (A, B) => A : B

    alias CheckInt = (T, U) => Any where .CheckTrait(T, U)
    alias CheckTest = .CheckInt(Foo, Tr)

    fun (Any) main () () {

    }
}