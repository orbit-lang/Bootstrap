module Orb::Core::Numbers {
    type Int
}

module Orb::Core::Booleans {
    type Bool {
        constructor True
        constructor False
    }

    (self Bool) and (other Bool) (Bool) = select self {
        case true = other
        case else = false
    }

    (self Bool) or (other Bool) (Bool) = select self {
        case true = true
        case else = other
    }

    (self Bool) not () (Bool) = select self {
        case true = false
        case else = true
    }

    infix operator boolAnd `&&` by Bool::and
    infix operator boolOr  `||` by Bool::or
    prefix operator boolNot `!` by Bool::not
}

module Orb::Core::Types {
    type Unit
    trait Any
}

module M with Orb::Core::* {
    alias Version = { major Int, minor Int, patch Int }

    type VersionComponent {
        constructor Major
        constructor Minor
        constructor Patch
    }

    (self Version) next (component VersionComponent) (Version) = select component {
        case Major = Version(self.major + 1, 0, 0)
        case Minor = Version(self.major, self.minor + 1, 0)
        case Patch = Version(self.major, self.minor, self.patch + 1)
    }

    (Unit) main () () {
        v0_0_0 = Version(0, 0, 0)
        v0_0_1 = v0_0_0.next(Patch)

        typeOf v0_0_0
        typeOf v0_0_1

        v0 = ${Version(${0}, ${0}, ${0})}
        v1 = ${v0.next(${Major})}

        typeOf v0
        typeOf v1
    }
}
