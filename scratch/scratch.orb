module Orb::Core::Types {
    type Unit of unit
}

module Orb::Core::Errors {
    trait Error
}

module Orb::Core::Booleans {
    type Bool of true, false

    fun (self Bool) not () (Bool) = select self {
        case .true = .false
        case .false = .true
    }

    fun (self Bool) and (other Bool) (Bool) = select (self, other) {
        case (.true, .true) = .true
        case else = .false
    }

    fun (self Bool) or (other Bool) (Bool) = select (self, other) {
        case (.true, .true) = .true
        case (.true, .false) = .true
        case (.false, .true) = .true
        case (.false, .false) = .false
    }

    fun (self Bool) same (other Bool) (Bool) = select (self, other) {
        case (.true, .true) = .true
        case (.false, .false) = .false
        case else = .false
    }

    prefix operator notOp `!` by ::not
    infix operator andOp `&&` by ::and
    infix operator orOp `||` by ::or
}

module Orb::Core::Numbers {
    type Int
}

module Orb::Core::Strings {
    type String
}

module Orb::More::Defaults {
    trait DefaultValueType {
        fun (Self) defaultValue () (Self)
    }
}

module Orb::More::Strings with Orb::Core::Strings with Orb::More::Defaults {
    projection String : DefaultValueType {
        fun (String) defaultValue () (${""}) = ${""}
    }
}

module Orb::More::Numbers with Orb::Core::Numbers with Orb::More::Defaults {
    projection Int : DefaultValueType {
        fun (Int) defaultValue () (${0}) = ${0}
    }
}

module M with Orb::Core::* with Orb::More::* {
    projection ${"Error"} : Error

    fun (self String) isEmpty () (Bool) = select self {
        case "" = .true
        case else = .false
    }

    fun (self Int) isZero () (Bool) = select self {
        case 0 = .true
        case else = .false
    }

    fun (Unit) main () () {
        s = "Hello, World!"

        typeOf String.defaultValue()
        typeOf Int.defaultValue()
    }
}