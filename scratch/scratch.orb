module Orb::Core::Types {
    type Unit
}

module Orb::Core::Booleans {
    type Bool {
        constructor True
        constructor False
    }
}

module Orb::Core::Numbers {
    type Int
    type Real
}

module Orb::Core::Errors with Orb::Core::* {
    trait Error
}

module Main with Orb::* {
    attribute Same = (A, B) => A = B
    attribute Like = (A, B) => A : B

    alias NTuple = (S, variadic T) => { first S, second T[0] }
#    { elements for T by $0, size N }

    alias F = .NTuple(Int, Int, Bool)

    fun (Unit) main () () {
        f = F(0, 1)
        typeOf f
    }
}