module Orb::Core::Types {
    type Unit of unit
}

module Orb::Core::Errors {
    trait Error
}

module Orb::Core::Booleans {
    type Bool of true, false

    fun (self Bool) not () (Bool) = select self {
        case .true = .false
        case .false = .true
    }

    fun (self Bool) and (other Bool) (Bool) = select (self, other) {
        case (.true, .true) = .true
        case else = .false
    }

    fun (self Bool) or (other Bool) (Bool) = select (self, other) {
        case (.true, .true) = .true
        case (.true, .false) = .true
        case (.false, .true) = .true
        case (.false, .false) = .false
    }

    fun (self Bool) same (other Bool) (Bool) = select (self, other) {
        case (.true, .true) = .true
        case (.false, .false) = .false
        case else = .false
    }

    prefix operator notOp `!` by ::not
    infix operator andOp `&&` by ::and
    infix operator orOp `||` by ::or
}

module Orb::More::Eq with Orb::Core::Booleans {
    trait Eq {
        fun (Self) equal (a Self, b Self) (Bool)
    }
}

module Orb::More::Booleans with Orb::More::Eq {
    projection Bool : Eq
        with equal by Bool::same
}

module Orb::Core::Numbers {
    type Int
}

module Orb::More::Numbers {
    projection Int : Eq
         with equal by { (x Int, y Int) -> select x - y {
            case 0 = .true
            case else = .false
        }}
}

module Orb::More::Fx {
    context FlowCtx [ResultType] {
        type Flow

        fun (self Flow) resume (value ResultType) (ResultType) = value
    }
}

module Orb::More::Tests {
    type Assertion
    type AssertionFailure
        of notTrue, notFalse, notEqual

    effect Fail = (AssertionFailure) -> Unit

    fun (Assertion) assertTrue (condition Bool) (Unit with Fail) = select condition {
        case .false = cause .Fail(.notTrue)
        case else = .unit
    }

    fun (Assertion) assertFalse (condition Bool) (Unit with Fail) = select condition {
        case .true = cause .Fail(.notFalse)
        case else = .unit
    }

    attribute Like = (A, B) => A : B

    effect Test = (Unit) -> Unit

    context AssertEqualCtx [T : Eq] {
        fun (Assertion) assertEqual (expected T, actual T) (Unit with Fail) {
            return select T.equal(actual, expected) {
                case .true = .unit
                case else = cause .Fail(.notEqual)
            }
        }
    }
}

module M with Orb::Core::* with Orb::More::* {
    projection ${0} : Error

    projection ${.false} : Error

    fun (Unit) main () () within AssertEqualCtx [Bool] {
        Assertion.assertTrue(.false) by { flow ->
            case Fail = panic 0
        }

        x = .true
        y = .false

        Assertion.assertEqual(x, y) by { flow ->
            case Fail = panic .false
        }
    }
}