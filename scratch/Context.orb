module Orb::Core::Numbers {
    type Int
}

module Orb::Core::Types {
    type Unit
    trait Any
}

module M with Orb::Core::* {
    context OptionCtx [Value] {
        type Option {
            constructor None
            constructor Some(value Value)
        }
    }

    context TransformCtx [A, B] with trait Transformable {
        (Self) map (value A) (B)
    }

    extension Option within OptionCtx [Any] {
        (self Value) wrap () (Option) = Some()

        projection Option : Transformable within TransformCtx [Value, Option] {
            (Option) map (value Value) (Option) = Some()
        }
    }

    type Foo

    projection Foo : Any

    alias Bar = Foo

    (Foo) main () (Foo) within OptionCtx [Foo] {
        return Bar()
    }
}