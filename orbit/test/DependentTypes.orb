api Orb {}
api Core within Orb {}
api Primitives within Orb::Core {
	type Int
	type Real
	type Char
	type Bool
}

api Test {
	type Foo(x Int)
}

api List : Orb::Core::Collection
	with Orb::FX::Pure {
	
	data type List<Element, Size Int>(size Int = Self.Size)
		: Collection<Element>

	# Pure return guarantees method body consists of a single
	# expression, which is free from side-effects.
	@Pure (List<Element, N>) appendAll<Element, implicit N Int, implicit M Int>
		(elementsOf other: List<Element, M>)
		(List<Element, N + M>) = self + other
}