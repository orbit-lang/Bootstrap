module Orb::Types::Intrinsics {
    type Unit
    type Int
    type Symbol
}

module Orb::Core::Main {
    type Main
}

module Orb::Compiler::Frontend::Components {
    trait Node

    type IdentifierNode(text Symbol) : Node
}

module Orb::More::Contexts {
    context Eq [A, B] where A = B
    context Like [A, B] where A : B
}

module Orb::Meta::Quotes with Orb::Compiler::* with Orb::More::* {
    type constructor QuotedSymbol<N>(node N) within Like [N, Node]
}

module Test with Orb::* {
    trait constructor Option<T>() {
        (self Self) unwrap () (T)
    }

    type constructor None<T>() : Option<T>
    type constructor Some<T>(value T) : Option<T>

#    postfix operator forceUnwrap ! by Option::unwrap

    (self Main) main _ _ {
        s = Some(1)

        typeOf s.unwrap()
    }
}
