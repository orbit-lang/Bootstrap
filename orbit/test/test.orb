module Orb::Types::Intrinsics {
    type Unit
    type Int
    type Symbol
    trait Any
}

module Orb::Meta::Kinds {
    trait Kind
}

module Context with Orb::* {
    type Foo

    context Eq [A, B]
        where A = B

    context Like [A, B]
        where A : B

    type constructor Type<T>(ref T)

    extension Type within Eq [T, T] {
        (self Self) kind () (Kind) = expand (mirror self.ref)
    }

#    extension Any within Like [Self, Any] {
#    }

#    extension Box within Eq [T, Bar] {
#        (self Self) bar () (Bar) = self.value
#    }

    (Foo) f () () {
        t = Type(Foo)
        print 1
    }
}