module Orb::Types::Intrinsics {
    type Unit
    type Int
    type Symbol

#    infix operator plus `+` by intrinsicFunction(Int::add(Int,Int))
}

module Orb::Core::Main {
    type Main
}

module Test with Orb::* {
    (Int) choose (a Int, b Int) (Int) = a
    (Int) choose2 (a Int, b Symbol) (Int) = a

    infix operator choose `?` by Int::choose
    infix operator choose `???` by Int::choose2

    type Range(start Int, end Int)

    infix operator range `...` by ::Range
    infix operator range `...` by Range::combine

    (Range) combine (a Range, b Range) (Range) = Range(a.start, b.end)

    (self Int) foo (b Int) (Int) = (self ? b)

    (self Main) main _ _ {
        a = 1 ... 2
        b = (1 ... 2) ... (2 ... 2)
    }
}
