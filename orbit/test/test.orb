module Orb::Types::Intrinsics {
    type Unit
    type Int
    type constructor Any<T>(value T)

    extension Any {
        (self Self) getSelf () (Self) = self
    }
}

module Orb::Core::Main {
    type Main
}

module Single with Orb::* {
    type A
    type B(a A)

    (self B) foo () (B) {
        defer(res) { typeOf res }

        return self
    }

    (self Main) main () () {
        defer(res) { typeOf res }

        a = A()
        b = B(a)

        aa = Any(a).getSelf()
        bb = Any(b).getSelf()

        typeOf Any(a)
        typeOf bb
    }
}