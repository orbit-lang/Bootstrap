module Orb::Types::Intrinsics {
    type Unit
    type Int
    type Symbol
    trait Any
}

module Orb::Core::Contexts {
    context Eq [A, B]
        where A = B

    context Impl [A, B]
        where A : B
}

module Orb::Meta {
    trait Type
}

module Orb::Meta::Kinds with Orb::Meta with Orb::Core::Contexts {
    trait Kind
    type Type : Kind
    type Trait : Kind

    type constructor Mirror<T>(reflectedType T)
        within Impl [T, Type]

    (self Kind) reflect () (Kind) = mirror self
}

module Context with Orb::* {
    type Foo

    type constructor Functor<F>
        within Eq [mirror F, Kinds::Type]

    (Foo) f () () {
        f = Functor<Foo>()

        print expand mirror Functor
        print expand Kinds::Type
    }
}