module Orb::Types::Intrinsics {
    type Unit
    type Int
    type Symbol
}

module Orb::Core::Main {
    type Main
}

module Orb::Compiler::Frontend::Components {
    trait Node

    type IdentifierNode(text Symbol) : Node
}

module Orb::More::Contexts {
    context Eq [A, B] where A = B
    context Like [A, B] where A : B
}

module Orb::Meta::Quotes with Orb::Compiler::* with Orb::More::* {
    type constructor QuotedSymbol<N>(node N) within Like [N, Node]
}

module Test with Orb::* {
    type Range(start Int, end Int)

    (Range) forceUnwrap (r Range) (Int) = (r.start)
    (Range) inRange (i Int, r Range) (Int) = (r.end)

    infix operator inclusiveRange ... by ::Range
    postfix operator forceUnwrap ! by Range::forceUnwrap
    infix operator inRange `in` by Range::inRange

    (self Main) main _ _ {
        i = (1 `in` (0 ... 10))!
    }
}
