module Orb::Types::Intrinsics {
    type Unit
    type Int
    type Symbol
}

module Orb::Meta::Kinds with Orb::Types::Intrinsics {
    trait Kind
}

module Context with Orb::* {
    trait Tr(x Int)
    trait Tr2(n Int)

    type Foo
    type Bar

    context Eq [A, B]
        where A = B

    context KindEq [A, B]
        where A ^ B

    context Like [A, B]
        where A : B

    context BothContext [A]
        where A : Tr
        where A : Tr2

    type constructor Box<T>(value T)
        within Eq [T, Foo]

    type constructor K<A, B>(a A, b B)
        within KindEq [A, B]

#    type constructor Functor [F]
#        where mirror F =

#    extension Box within Like[T, Tr] {
#        (self Self) getX () (Int) = self.x
#    }

    (Foo) f () () {
        k = K(expand 1, expand :abc)

        typeOf mirror k.a
    }
}