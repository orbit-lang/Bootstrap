module Orb::Types::Intrinsics {
    type Unit
    type Int
    type Symbol
}

module Context with Orb::* {
    type Foo(x Int)
    type Bar

    context Eq [A, B]
        where A = B

    type constructor Box<T>(value T)

    extension Box within Eq [T, Foo] {
        (self Self) getX () (Int) = self.value.x
    }

    extension Box within Eq [T, Bar] {
        (self Self) getBar () (Bar) = self.value
    }

    (Foo) f () () {
        b = Box(Foo(1))
        c = Box(Bar())

        x = b.getX()
        z = c.getBar()
    }
}