@Main
module M with Orb::Core::* with Orb::Compiler::* {
    type constructor Box<T>(value T)
    trait A(value Int)

    extension Box where Self[T] : A {
        (self Self) getValue() (AnyType) = self.value
    }

    extension Box where Self[T] = Symbol {
        (self Self) getValue() (Symbol) = self.value
    }

    (self Main) main () () {
        b = Box(:symbol)
        print b.getValue()

        c = Box(1)
        print c.getValue()
    }
}