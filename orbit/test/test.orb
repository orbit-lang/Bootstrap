@Main
module M with Orb::Types::Intrinsics with Orb::Core::Main {
    trait constructor Expr<T> {
        (self Self) evaluate () (T)
    }

    type constructor Var<V>(name V) : Expr<V>
    type constructor Bin<B>(lhs Var<B>, rhs Var<B>, op Symbol) : Expr<B>

    (self Expr<Symbol>) evaluate () (Symbol) {
        return :a
    }

    (self Main) main () () {
        x = Var<Symbol>(:x)
        y = Var<Symbol>(:y)
        z = Bin<Symbol>(x, y, :plus)

        print x.symbol()
        print y.symbol()
        print z.symbol()
    }
}