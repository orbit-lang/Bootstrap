module Orb::Types::Intrinsics {
    type Unit
    type Int
    type constructor Any<T>(value T)

    extension Any {
        (self Self) getSelf () (Self) = self
    }
}

module Orb::Core::Main {
    type Main
}

module Single with Orb::* {
    type constructor Box<T>(value T)

    type A
    trait B
    type C

    projection Box<A> : B

    extension Box where T : B {
        (self Self) takeB () (B) = self.value
    }

    projection A : B
    projection C : B

    (self Main) main () () {
        aBox = Box(A())
    }
}