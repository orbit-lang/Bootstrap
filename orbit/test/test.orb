module Orb::Types::Intrinsics {
    type Unit
    type Int
    type constructor Any<T>(value T)

    extension Any {
        (self Self) getSelf () (Self) = self
    }
}

module Orb::Core::Main {
    type Main
}

module Single with Orb::* {
    trait A(x Int)
    type B

    projection B : A
        where x = 1

    extension B {
        (self Self) doubleX () (Int) = self.x
    }

    type constructor Box<T>(value T)

    extension Box where T = B {
        (self Self) getB () (B) = self.value
    }

    (self Main) main () () {

    }
}