module Orb::Types::Intrinsics {
    type Unit
    type Int
    type Symbol
}

module Context with Orb::* {
    type Foo(x Int) : XAware
    type Bar
    trait XAware(x Int)

    context Eq [A, B]
        where A = B

    context Like [A, B]
        where A : B

    type constructor Box<T>(value T)
        within Eq [T, Foo]

    extension Box within Eq [T, Bar] {
        (self Self) bar () (Bar) = self.value
    }

    (Foo) f () () {
        b = Box(Bar())
    }
}