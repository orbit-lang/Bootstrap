int : (:int *)
bool : (:bool *)

tree a : (* a)

inductive : (:inductive *)
inductive.base : (:base inductive)

∀ ψ:Γ I:inductive :
    ∃ ψ J:(*) Λ J ⟸ (inductive.base I)

nat :: (inductive :nat)
nat.zero : (inductive.base nat)
nat.succ (N:nat) : (:succ N)

add (n:nat m:nat) :: Λ(n m) : nat
add (zero zero) : zero
add (zero succ) : m
add (succ zero) : n
add (succ succ) : add(n.N m.N)

let t = 0 in select t
    (nat.succ N) ⟹ print N
    _ ⟹ print nat.zero

select (

∀(N:nat M:nat) :

add (3 4) : succ add (2 3)

⟹λΛΣΦΨΩΠωπϕψφϴ∀Γ∧∨⟸∃